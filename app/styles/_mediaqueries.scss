// ##############################
// Reduced Motion
// ##############################

@mixin reducedMotion() {
  @media (prefers-reduced-motion) {
    @content;
  }
}

// ##############################
// Mouse only
// ##############################

@mixin mouseOnly() {
  @media (hover: hover) and (pointer: fine) {
    @content;
  }
}

// ##############################
// Breakpoints
// Inspired by: https://github.com/sass-mq/sass-mq
// ##############################

// breakpoints
$breakpoint-zero-min: var(--breakpoint-zero);
$breakpoint-micro-min: var(--breakpoint-micro);
$breakpoint-small-min: var(--breakpoint-small);
$breakpoint-medium-min: var(--breakpoint-medium);
$breakpoint-large-min: var(--breakpoint-large);
$breakpoint-wide-min: var(--breakpoint-wide);
$breakpoint-ultra-min: var(--breakpoint-ultra);

// breakpoint map
$mq-breakpoints: (
  zero: 0,
  micro: 360,
  small: 600,
  medium: 840,
  large: 1024,
  wide: 1280,
  ultra: 1440,
) !default;

// media type
$mq-media-type: all !default;

@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {
  @if map-has-key($breakpoints, $name) {
    @return map-get($breakpoints, $name);
  } @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
  }
}

@mixin breakpoint(
  $from: false,
  $to: false,
  $and: false,
  $media-type: $mq-media-type,
  $breakpoints: $mq-breakpoints,
) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: $from * 1px;
    } @else {
      $min-width: mq-get-breakpoint-width($from, $breakpoints) * 1px;
    }
  }

  // Until: that breakpoint (exclusive)
  @if $to {
    @if type-of($to) == number {
      $max-width: $to * 1px;
    } @else {
      $max-width: mq-get-breakpoint-width($to, $breakpoints) * 1px;
    }
  }

  @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
  
  @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
  
  @if $and { $media-query: '#{$media-query} and #{$and}'; }

  // Remove unnecessary media query prefix 'all and '
  @if $media-type == 'all' and $media-query != '' {
    $media-type: '';

    /* stylelint-disable scss/no-global-function-names */
    $media-query: str-slice($media-query, 6);
    /* stylelint-enable scss/no-global-function-names */
  }

  @media #{$media-type + $media-query} {
    @content;
  }

}